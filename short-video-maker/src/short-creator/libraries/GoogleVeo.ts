/* eslint-disable @remotion/deterministic-randomness */
import { getOrientationConfig } from "../../components/utils";
import { logger } from "../../logger";
import { OrientationEnum, type Video } from "../../types/shorts";

const defaultTimeoutMs = 30000; // Veo takes longer to generate
const retryTimes = 3;
const maxGenerationTimeMs = 120000; // 2 minutes max wait

export class GoogleVeoAPI {
  private baseURL: string;
  private projectId: string;
  private region: string = "us-central1";
  
  constructor(
    private API_KEY: string, 
    projectId: string, 
    region: string = "us-central1"
  ) {
    this.projectId = projectId;
    this.region = region;
    this.baseURL = `https://${region}-aiplatform.googleapis.com/v1/projects/${projectId}/locations/${region}/publishers/google/models`;
  }

  private async _generateVideo(
    prompt: string,
    minDurationSeconds: number,
    orientation: OrientationEnum,
    timeout: number = defaultTimeoutMs,
  ): Promise<Video> {
    if (!this.API_KEY) {
      throw new Error("Google Cloud API key not set");
    }
    
    logger.debug(
      { prompt, minDurationSeconds, orientation },
      "Generating video with Google Veo API",
    );

    const aspectRatio = orientation === OrientationEnum.portrait ? "9:16" : "16:9";
    const duration = Math.max(minDurationSeconds, 5); // Minimum 5 seconds

    const headers = new Headers();
    headers.append("Authorization", `Bearer ${this.API_KEY}`);
    headers.append("Content-Type", "application/json");

    // Use Veo 3 model for better quality and 9:16 support
    const modelEndpoint = `${this.baseURL}/veo-3.0-generate-preview:generateContent`;
    
    const requestBody = {
      contents: [{
        parts: [{
          text: prompt
        }]
      }],
      generationConfig: {
        aspectRatio: aspectRatio,
        resolution: "1080p", // Use 1080p HD
        responseCount: 1,
        duration: `${duration}s`,
        // Enable synchronized sound for better results
        enableSynchronizedSound: true
      }
    };

    logger.debug({ requestBody }, "Sending request to Veo API");

    try {
      const response = await fetch(modelEndpoint, {
        method: "POST",
        headers,
        body: JSON.stringify(requestBody),
        signal: AbortSignal.timeout(timeout),
      });

      if (!response.ok) {
        if (response.status === 401) {
          throw new Error(
            "Invalid Google Cloud API key - please make sure you have proper authentication set up"
          );
        }
        if (response.status === 403) {
          throw new Error(
            "Google Cloud Vertex AI access denied - please enable Vertex AI API and check permissions"
          );
        }
        const errorText = await response.text();
        throw new Error(`Veo API error: ${response.status} ${response.statusText} - ${errorText}`);
      }

      const result = await response.json();
      logger.debug({ result }, "Received response from Veo API");

      // Extract video URL from response
      if (!result.candidates || !result.candidates[0] || !result.candidates[0].content) {
        throw new Error("No video generated by Veo API");
      }

      const candidate = result.candidates[0];
      const videoContent = candidate.content;
      
      // Veo returns video data differently - check for video parts
      let videoUrl: string | undefined;
      let videoId: string = `veo-${Date.now()}`;

      if (videoContent.parts && videoContent.parts[0]) {
        const part = videoContent.parts[0];
        if (part.videoData && part.videoData.videoUri) {
          videoUrl = part.videoData.videoUri;
        } else if (part.fileData && part.fileData.fileUri) {
          videoUrl = part.fileData.fileUri;
        }
      }

      if (!videoUrl) {
        throw new Error("No video URL found in Veo API response");
      }

      const { width: requiredVideoWidth, height: requiredVideoHeight } =
        getOrientationConfig(orientation);

      const video: Video = {
        id: videoId,
        url: videoUrl,
        width: requiredVideoWidth,
        height: requiredVideoHeight,
      };

      logger.debug(
        { prompt, video, minDurationSeconds, orientation },
        "Generated video with Google Veo API",
      );

      return video;

    } catch (error: unknown) {
      logger.error(error, "Error generating video with Veo API");
      throw error;
    }
  }

  async findVideo(
    searchTerms: string[],
    minDurationSeconds: number,
    excludeIds: string[] = [],
    orientation: OrientationEnum = OrientationEnum.portrait,
    timeout: number = defaultTimeoutMs,
    retryCounter: number = 0,
  ): Promise<Video> {
    // Create a comprehensive prompt from search terms
    const prompt = this.createVideoPrompt(searchTerms, minDurationSeconds, orientation);
    
    try {
      const video = await this._generateVideo(
        prompt,
        minDurationSeconds,
        orientation,
        timeout,
      );

      // Check if this video ID should be excluded (unlikely with generated content, but keeping interface)
      if (excludeIds.includes(video.id)) {
        // Generate with a slightly modified prompt
        const modifiedPrompt = this.createVideoPrompt(searchTerms, minDurationSeconds, orientation, true);
        return await this._generateVideo(modifiedPrompt, minDurationSeconds, orientation, timeout);
      }

      return video;

    } catch (error: unknown) {
      if (
        error instanceof Error &&
        error instanceof DOMException &&
        error.name === "TimeoutError"
      ) {
        if (retryCounter < retryTimes) {
          logger.warn(
            { searchTerms, retryCounter },
            "Timeout error generating video, retrying...",
          );
          return await this.findVideo(
            searchTerms,
            minDurationSeconds,
            excludeIds,
            orientation,
            timeout,
            retryCounter + 1,
          );
        }
        logger.error(
          { searchTerms, retryCounter },
          "Timeout error, retry limit reached",
        );
      }

      logger.error(error, "Error finding video with Veo API");
      throw new Error(`Failed to generate video with Veo API: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  private createVideoPrompt(
    searchTerms: string[], 
    durationSeconds: number, 
    orientation: OrientationEnum,
    variant: boolean = false
  ): string {
    const baseTerms = searchTerms.join(" ");
    const orientationHint = orientation === OrientationEnum.portrait 
      ? "vertical mobile-friendly format" 
      : "cinematic widescreen format";
    
    const variantSuffix = variant ? ", alternative perspective" : "";
    
    // Create a more detailed prompt for better Veo results
    const prompt = `Create a high-quality ${durationSeconds}-second video featuring ${baseTerms}. ` +
      `The video should be in ${orientationHint}, with smooth camera movements and professional lighting. ` +
      `Include rich details, vibrant colors, and engaging composition. ` +
      `Make it suitable for social media content${variantSuffix}.`;
    
    logger.debug({ prompt, searchTerms, orientation }, "Created Veo prompt");
    
    return prompt;
  }
}